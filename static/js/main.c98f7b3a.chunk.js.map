{"version":3,"sources":["functions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["checkGameState","board","conditions","condition","every","cell","getBotDecision","currentPlayer","moves","opponent","moveNumber","findIndex","x","Math","floor","random","includes","spots","allLines","slice","filter","lines","map","flat","value","index","self","indexOf","getSpotForSide","length","getAvailableSpots","splice","console","log","getWinnableLines","position","checkWinnable","getStrategicSpots","exclusion","line","excSpots","player","winnableLines","winnablePosition","block","intersections","i","sum","j","line1","line2","push","max","intersectionPoint","Board","cells","onClick","className","Square","key","cellState","disabled","startsWith","substring","ScoreBoard","multiPlayer","reset","colSpan","id","App","useState","Array","fill","setBoard","setMoves","score","setScore","setCurrentPlayer","botPlayer","winner","setWinner","suggestion","setSuggestion","multiPlayerMode","play","boardCopy","movesCopy","gameState","winLine","endBoard","from","endBoardState","scoreCopy","useEffect","botDecision","botMove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c98f7b3a.chunk.js","sourcesContent":["function getWinConditions(): number[][]{\r\n    return [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n}\r\n\r\nfunction checkGameState(board: string[]): [string, number[]] {\r\n    let conditions = getWinConditions();\r\n    for (let condition of conditions) {\r\n        if (board[condition[0]] != null && board[condition[0]] === board[condition[1]] && board[condition[1]] === board[condition[2]])\r\n            return [board[condition[0]], condition];\r\n    }\r\n    if (board.every((cell) => (cell != null)))\r\n        return [\"Draw\", [-1, -1, -1]];\r\n    else\r\n        return [\"\", [-1, -1, -1]];\r\n}\r\n\r\nfunction endBoardState(board: string[], winLine: number[]): string[] {\r\n    let endBoard = Array.from(board, (value: string) => (!value ? \"-\" : value));\r\n    for (let index of winLine) \r\n        endBoard[index] = \"*\" + endBoard[index];\r\n    return endBoard;\r\n}\r\n\r\nfunction getBotDecision(board: string[], currentPlayer: string, moves: number[]): number {\r\n    let opponent: string = \"\";\r\n    if (currentPlayer === \"O\")\r\n        opponent =\"X\";\r\n    else\r\n        opponent =\"O\";\r\n\r\n    let moveNumber: number = moves.findIndex((x: number) => x===-1);\r\n    if (moveNumber === 0)\r\n        return Math.floor(Math.random() * 9);\r\n\r\n    if (moveNumber === 1) {\r\n        if (moves[0] === 4) \r\n            return [0,2,6,8][Math.floor(Math.random() * 4)];\r\n        else if ([0,2,6,8].includes(moves[0]))\r\n            return 4;\r\n        else {\r\n            let spots = getSpotForSide(board, opponent);\r\n            return spots[Math.floor(Math.random() * spots.length)];\r\n        }\r\n    }\r\n\r\n    if (moveNumber === 2) {\r\n        if ([0,2,6,8].includes(moves[1]) && !board[4])\r\n            return 4;\r\n        else if ([1,3,5,7].includes(moves[0])) {\r\n            let spots = getAvailableSpots(board);\r\n            spots.splice(spots.indexOf(8-moves[0]), 1);\r\n            console.log(spots);\r\n            return spots[Math.floor(Math.random() * spots.length)];\r\n        }\r\n        else {\r\n            let spots = getAvailableSpots(board);\r\n            console.log(spots);\r\n            return spots[Math.floor(Math.random() * spots.length)];\r\n        }\r\n    }\r\n\r\n    let lines: number[][] = getWinnableLines(board);\r\n    let position: number = checkWinnable(board, lines, currentPlayer);\r\n    if (position !== -1)\r\n        return position;\r\n    position = checkWinnable(board, lines, opponent);\r\n    if (position !== -1)\r\n        return position;\r\n    \r\n    if (moveNumber === 3) {\r\n        if (moves[0] === 4 && moves[1]+moves[2] === 8) {\r\n            let spots = [0,2,6,8];\r\n            spots.splice([0,2,6,8].indexOf(moves[1]), 1);\r\n            spots.splice(spots.indexOf(moves[2]), 1);\r\n            return spots[Math.floor(Math.random() * spots.length)];\r\n        }\r\n        else if ([0,2,6,8].includes(moves[0]) && moves[0]+moves[2] === 8)\r\n            return [1,3,5,7][Math.floor(Math.random() * 4)];\r\n        else if ([1,3,5,7].includes(moves[0])) {\r\n            let spots: number[] = getStrategicSpots(board, opponent, true);\r\n            let exclusion: number[] = getWinnableLines(board).filter((line: number[]) => \r\n                (line.map((x:number) => board[x]).includes(currentPlayer))).flat();\r\n            let excSpots: number[] = spots.filter((x: number) => !exclusion.includes(x));\r\n            if (excSpots.length === 0)\r\n                return spots[Math.floor(Math.random() * spots.length)];\r\n            else\r\n                return excSpots[Math.floor(Math.random() * excSpots.length)]; \r\n        }\r\n    }\r\n    \r\n    let spots: number[] = getStrategicSpots(board, currentPlayer, false);\r\n    if (spots.length !== 0)\r\n        return spots[Math.floor(Math.random() * spots.length)];\r\n    spots= getStrategicSpots(board, opponent, true);\r\n    if (spots.length !== 0)\r\n        return spots[Math.floor(Math.random() * spots.length)];\r\n    \r\n    spots = getAvailableSpots(board);\r\n    return spots[Math.floor(Math.random() * spots.length)];\r\n}\r\n\r\nfunction getWinnableLines(board: string[]): number[][] {\r\n    let allLines: number[][] = getWinConditions();\r\n    allLines = allLines.filter((lines: number[]) => (\r\n        !(lines.map((x: number) => board[x]).includes(\"O\") && lines.map((x: number) => board[x]).includes(\"X\"))\r\n    ));\r\n    allLines = allLines.filter((lines: number[]) => !lines.map((x: number) => board[x]).every((x) => !x));\r\n    return allLines;\r\n}\r\n\r\nfunction checkWinnable(board: string[], lines: number[][], player: string): number {\r\n    let winnableLines: number[][] = lines.filter((line: number[]) => line.map((x: number) => board[x]).includes(player));\r\n    winnableLines = winnableLines.filter((line: number[]) => line.filter((x) => !board[x]).length === 1);\r\n    let winnablePosition: number[] = winnableLines.map((line: number[]) => line.filter((x) => !board[x])[0]);\r\n    if (winnablePosition.length === 0)\r\n        return -1;\r\n    else\r\n        return winnablePosition[Math.floor(Math.random() * winnablePosition.length)];\r\n}\r\n\r\nfunction getSpotForSide(board: string[], opponent: string): number[] {\r\n    let allLines: number[][] = getWinConditions().slice(0,6);\r\n    allLines = allLines.filter((lines: number[]) => (lines.map((x: number) => board[x]).includes(opponent)));\r\n    let spots = allLines.flat().filter((value, index, self) => self.indexOf(value) === index);\r\n    spots = spots.filter((x: number) => !board[x]);\r\n    return spots;\r\n}\r\n\r\nfunction getAvailableSpots(board: string[]): number[] {\r\n    let spots: number[] = [0,1,2,3,4,5,6,7,8];\r\n    spots = spots.filter((x: number) => !board[x]);\r\n    return spots;\r\n}\r\n\r\nfunction getStrategicSpots(board: string[], player: string, block: boolean): number[] {\r\n    let lines = getWinnableLines(board);\r\n    lines = lines.filter((line: number[]) => (line.map((x: number) => board[x]).includes(player)));\r\n    let intersections: number[] = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        let sum: number = 0;\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (i === j)\r\n                continue;\r\n            let line1: number[] = lines[i];\r\n            let line2: number[] = lines[j];\r\n            if (line1.filter((x: number) => line2.includes(x)).length !== 0)\r\n                sum++;\r\n        }\r\n        intersections.push(sum);\r\n    }\r\n    if (intersections.length === 0)\r\n        return [];\r\n    \r\n    if (block) {\r\n        lines = lines.filter((line: number[], index: number) => (intersections[index] === Math.max(...intersections)));\r\n        let spots: number[] = lines.flat().filter((value, index, self) => self.indexOf(value) === index);\r\n        spots = spots.filter((x: number) => !board[x]);\r\n        return spots;\r\n    }\r\n    else {\r\n        lines = lines.filter((line: number[], index: number) => (intersections[index] > 0));\r\n        let spots: number[] = [];\r\n        for (let i = 0; i < lines.length; i++)\r\n            for (let j = i + 1; j < lines.length; j++) {\r\n                let intersectionPoint: number = lines[i].filter((x: number) => lines[j].includes(x))[0];\r\n                if (!spots.includes(intersectionPoint))\r\n                    spots.push(intersectionPoint);\r\n            }\r\n        spots = spots.filter((x: number) => !board[x]);\r\n        return spots;\r\n    }\r\n}\r\n\r\nexport {checkGameState, endBoardState, getBotDecision};","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {checkGameState, endBoardState, getBotDecision} from './functions';\n\ntype boardProps = {cells: string[], onClick: (i: number) => void};\ntype cellProps = {cellState: string, onClick: () => void};\ntype scoreBoardProps = {multiPlayer: boolean, value: number[], reset: () => void};\n\nfunction Board ({ cells, onClick }: boardProps) {\n  return (\n    <div className=\"Board\">\n      {cells.map((cell, i) => (\n        <Square key={i} cellState={cell} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n}\n\nfunction Square ({ cellState, onClick }: cellProps) {\n  let className: string = \"Cell\";\n  let disabled = cellState ? true : false;\n  let value: string = \"\";\n\n  if (cellState)\n  {\n    if (cellState.startsWith(\"*\")) {\n      value = cellState.substring(1);\n      className = className + \" highlight\";\n    }\n    else if (cellState === \"-\")\n      value = \"\";\n    else if (cellState === \"#\") {\n      className = className + \" suggestion\";\n      disabled = false;\n    }\n    else\n      value = cellState;\n  }\n\n  if (value === \"O\")\n    className = className + \" blue\";\n  else if (value === \"X\")\n    className = className + \" red\";\n\n  return(\n    <button className={className} onClick={onClick} disabled={disabled}>\n      {value}\n    </button>\n  ); \n}\n\nfunction ScoreBoard({multiPlayer, value, reset}: scoreBoardProps) {\n  return (\n    <table>\n      <thead>\n        <tr><th colSpan={3}>Score Board</th></tr>\n      </thead>\n      <tbody>\n        <tr><td>Player (O)</td><td>{multiPlayer?\"Player (X)\":\"Bot (X)\"}</td><td>Draw</td></tr>\n        <tr><td>{value[0]}</td><td>{value[1]}</td><td>{value[2]}</td></tr>\n        <tr><td colSpan={3} id=\"buttons\"><button onClick={reset}>Reset Score</button></td></tr>\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [moves, setMoves] = useState(Array(9).fill(-1));\n  const [score, setScore] = useState(Array(3).fill(0));\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [botPlayer, setBotPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(\"\");\n  const [suggestion, setSuggestion] = useState(-1);\n  const [multiPlayerMode, setmultiPlayerMode] = useState(false);\n  \n  const click = (i: number) => {\n    play(i);\n  };\n\n  const botMove = () => {\n    let botDecision = getBotDecision(board, currentPlayer, moves);\n    play(botDecision);\n  };\n\n  const play = (i: number) => {\n    let boardCopy = board;\n    let movesCopy = moves;\n    if (suggestion !== -1) {\n      boardCopy[suggestion] = null;\n      setSuggestion(-1);\n    }\n    boardCopy[i] = currentPlayer;\n    movesCopy[movesCopy.findIndex((x: number) => x===-1)] = i;\n    setMoves(movesCopy);\n    let gameState = checkGameState(board);\n    if (!gameState[0]) {\n      if (currentPlayer === \"O\")\n        setCurrentPlayer(\"X\");\n      else\n        setCurrentPlayer(\"O\");\n    }\n    else{\n      boardCopy = endBoardState(boardCopy, gameState[1]);\n      setWinner(gameState[0]);\n      let scoreCopy = score;\n      if (gameState[0]===\"Draw\")\n        scoreCopy[2] = scoreCopy[2]+1;\n      else if (gameState[0]===\"O\") {\n        scoreCopy[0] = scoreCopy[0]+1;\n        setCurrentPlayer(\"X\");\n      }\n      else {\n        scoreCopy[1] = scoreCopy[1]+1;\n        setCurrentPlayer(\"O\");\n      }\n      setScore(scoreCopy);\n    } \n    setBoard(boardCopy);\n  }\n\n  const resetBoard = () => {\n    let gameState = checkGameState(board);\n    console.log(gameState)\n    if (!gameState[0]) {\n      if (moves.findIndex((x: number) => x===-1) % 2 === 1) {\n        if (currentPlayer === \"O\")\n          setCurrentPlayer(\"X\");\n        else\n          setCurrentPlayer(\"O\");\n      }\n    }\n    setBoard(Array(9).fill(null));\n    setMoves(Array(9).fill(-1));\n    setWinner(\"\");\n  } ;\n\n  const getSuggestion = () => {\n    console.log(\"suggestion\")\n    let boardCopy = board;\n    if (suggestion !== -1)\n      boardCopy[suggestion] = null;\n    let botDecision = getBotDecision(board, currentPlayer, moves);\n    boardCopy[botDecision] = \"#\";\n    setBoard(boardCopy);\n    setSuggestion(botDecision);\n  }\n\n  const resetScore = () => {\n    setScore([0,0,0]);\n  };\n\n  useEffect(\n    () => {\n      if (!multiPlayerMode && currentPlayer===botPlayer && !winner)\n        botMove();\n    }\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <p>{winner?(winner===\"Draw\"?winner:((!multiPlayerMode&&(winner===botPlayer))?\"Bot (\"+winner+\") wins\":\"Player (\"+winner+\") wins\"))\n      :(multiPlayerMode?\"Player \"+currentPlayer+\"'s turn\":(currentPlayer===botPlayer?\"Bot's turn (\"+botPlayer+\")\":\"Player's turn (\"+currentPlayer+\")\"))}</p>\n      <Board cells={board} onClick={click} />\n      <div id=\"buttons\">\n        <button onClick={resetBoard}>Restart</button>\n        <button disabled={winner?true:false} onClick={getSuggestion}>Suggestion</button>\n      </div>\n      <ScoreBoard multiPlayer={multiPlayerMode} value={score} reset={resetScore}/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}